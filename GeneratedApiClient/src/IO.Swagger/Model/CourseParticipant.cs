/* 
 * Student survey system API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CourseParticipant
    /// </summary>
    [DataContract]
        public partial class CourseParticipant :  IEquatable<CourseParticipant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CourseParticipant" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="participantId">participantId.</param>
        /// <param name="participant">participant.</param>
        /// <param name="courseId">courseId.</param>
        /// <param name="course">course.</param>
        public CourseParticipant(int? id = default(int?), int? participantId = default(int?), User participant = default(User), int? courseId = default(int?), Course course = default(Course))
        {
            this.Id = id;
            this.ParticipantId = participantId;
            this.Participant = participant;
            this.CourseId = courseId;
            this.Course = course;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantId
        /// </summary>
        [DataMember(Name="participantId", EmitDefaultValue=false)]
        public int? ParticipantId { get; set; }

        /// <summary>
        /// Gets or Sets Participant
        /// </summary>
        [DataMember(Name="participant", EmitDefaultValue=false)]
        public User Participant { get; set; }

        /// <summary>
        /// Gets or Sets CourseId
        /// </summary>
        [DataMember(Name="courseId", EmitDefaultValue=false)]
        public int? CourseId { get; set; }

        /// <summary>
        /// Gets or Sets Course
        /// </summary>
        [DataMember(Name="course", EmitDefaultValue=false)]
        public Course Course { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CourseParticipant {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("  Participant: ").Append(Participant).Append("\n");
            sb.Append("  CourseId: ").Append(CourseId).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CourseParticipant);
        }

        /// <summary>
        /// Returns true if CourseParticipant instances are equal
        /// </summary>
        /// <param name="input">Instance of CourseParticipant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CourseParticipant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ParticipantId == input.ParticipantId ||
                    (this.ParticipantId != null &&
                    this.ParticipantId.Equals(input.ParticipantId))
                ) && 
                (
                    this.Participant == input.Participant ||
                    (this.Participant != null &&
                    this.Participant.Equals(input.Participant))
                ) && 
                (
                    this.CourseId == input.CourseId ||
                    (this.CourseId != null &&
                    this.CourseId.Equals(input.CourseId))
                ) && 
                (
                    this.Course == input.Course ||
                    (this.Course != null &&
                    this.Course.Equals(input.Course))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ParticipantId != null)
                    hashCode = hashCode * 59 + this.ParticipantId.GetHashCode();
                if (this.Participant != null)
                    hashCode = hashCode * 59 + this.Participant.GetHashCode();
                if (this.CourseId != null)
                    hashCode = hashCode * 59 + this.CourseId.GetHashCode();
                if (this.Course != null)
                    hashCode = hashCode * 59 + this.Course.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
