/* 
 * Student survey system API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuestionResultsDto
    /// </summary>
    [DataContract]
        public partial class QuestionResultsDto :  IEquatable<QuestionResultsDto>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets QuestionType
        /// </summary>
        [DataMember(Name="questionType", EmitDefaultValue=false)]
        public QuestionType? QuestionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionResultsDto" /> class.
        /// </summary>
        /// <param name="questionIndex">questionIndex.</param>
        /// <param name="questionId">questionId.</param>
        /// <param name="questionText">questionText.</param>
        /// <param name="questionType">questionType.</param>
        /// <param name="questionAnswers">questionAnswers.</param>
        /// <param name="answerPercentages">answerPercentages.</param>
        /// <param name="mean">mean.</param>
        public QuestionResultsDto(int? questionIndex = default(int?), int? questionId = default(int?), string questionText = default(string), QuestionType? questionType = default(QuestionType?), List<QuestionAnswerDto> questionAnswers = default(List<QuestionAnswerDto>), List<AnswerPercentage> answerPercentages = default(List<AnswerPercentage>), double? mean = default(double?))
        {
            this.QuestionIndex = questionIndex;
            this.QuestionId = questionId;
            this.QuestionText = questionText;
            this.QuestionType = questionType;
            this.QuestionAnswers = questionAnswers;
            this.AnswerPercentages = answerPercentages;
            this.Mean = mean;
        }
        
        /// <summary>
        /// Gets or Sets QuestionIndex
        /// </summary>
        [DataMember(Name="questionIndex", EmitDefaultValue=false)]
        public int? QuestionIndex { get; set; }

        /// <summary>
        /// Gets or Sets QuestionId
        /// </summary>
        [DataMember(Name="questionId", EmitDefaultValue=false)]
        public int? QuestionId { get; set; }

        /// <summary>
        /// Gets or Sets QuestionText
        /// </summary>
        [DataMember(Name="questionText", EmitDefaultValue=false)]
        public string QuestionText { get; set; }


        /// <summary>
        /// Gets or Sets QuestionAnswers
        /// </summary>
        [DataMember(Name="questionAnswers", EmitDefaultValue=false)]
        public List<QuestionAnswerDto> QuestionAnswers { get; set; }

        /// <summary>
        /// Gets or Sets AnswerPercentages
        /// </summary>
        [DataMember(Name="answerPercentages", EmitDefaultValue=false)]
        public List<AnswerPercentage> AnswerPercentages { get; set; }

        /// <summary>
        /// Gets or Sets Mean
        /// </summary>
        [DataMember(Name="mean", EmitDefaultValue=false)]
        public double? Mean { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuestionResultsDto {\n");
            sb.Append("  QuestionIndex: ").Append(QuestionIndex).Append("\n");
            sb.Append("  QuestionId: ").Append(QuestionId).Append("\n");
            sb.Append("  QuestionText: ").Append(QuestionText).Append("\n");
            sb.Append("  QuestionType: ").Append(QuestionType).Append("\n");
            sb.Append("  QuestionAnswers: ").Append(QuestionAnswers).Append("\n");
            sb.Append("  AnswerPercentages: ").Append(AnswerPercentages).Append("\n");
            sb.Append("  Mean: ").Append(Mean).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuestionResultsDto);
        }

        /// <summary>
        /// Returns true if QuestionResultsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QuestionResultsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuestionResultsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuestionIndex == input.QuestionIndex ||
                    (this.QuestionIndex != null &&
                    this.QuestionIndex.Equals(input.QuestionIndex))
                ) && 
                (
                    this.QuestionId == input.QuestionId ||
                    (this.QuestionId != null &&
                    this.QuestionId.Equals(input.QuestionId))
                ) && 
                (
                    this.QuestionText == input.QuestionText ||
                    (this.QuestionText != null &&
                    this.QuestionText.Equals(input.QuestionText))
                ) && 
                (
                    this.QuestionType == input.QuestionType ||
                    (this.QuestionType != null &&
                    this.QuestionType.Equals(input.QuestionType))
                ) && 
                (
                    this.QuestionAnswers == input.QuestionAnswers ||
                    this.QuestionAnswers != null &&
                    input.QuestionAnswers != null &&
                    this.QuestionAnswers.SequenceEqual(input.QuestionAnswers)
                ) && 
                (
                    this.AnswerPercentages == input.AnswerPercentages ||
                    this.AnswerPercentages != null &&
                    input.AnswerPercentages != null &&
                    this.AnswerPercentages.SequenceEqual(input.AnswerPercentages)
                ) && 
                (
                    this.Mean == input.Mean ||
                    (this.Mean != null &&
                    this.Mean.Equals(input.Mean))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuestionIndex != null)
                    hashCode = hashCode * 59 + this.QuestionIndex.GetHashCode();
                if (this.QuestionId != null)
                    hashCode = hashCode * 59 + this.QuestionId.GetHashCode();
                if (this.QuestionText != null)
                    hashCode = hashCode * 59 + this.QuestionText.GetHashCode();
                if (this.QuestionType != null)
                    hashCode = hashCode * 59 + this.QuestionType.GetHashCode();
                if (this.QuestionAnswers != null)
                    hashCode = hashCode * 59 + this.QuestionAnswers.GetHashCode();
                if (this.AnswerPercentages != null)
                    hashCode = hashCode * 59 + this.AnswerPercentages.GetHashCode();
                if (this.Mean != null)
                    hashCode = hashCode * 59 + this.Mean.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
