/* 
 * Student survey system API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SurveyResultsDto
    /// </summary>
    [DataContract]
        public partial class SurveyResultsDto :  IEquatable<SurveyResultsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyResultsDto" /> class.
        /// </summary>
        /// <param name="surveyId">surveyId.</param>
        /// <param name="surveyName">surveyName.</param>
        /// <param name="anonymous">anonymous.</param>
        /// <param name="questionResults">questionResults.</param>
        public SurveyResultsDto(int? surveyId = default(int?), string surveyName = default(string), bool? anonymous = default(bool?), List<QuestionResultsDto> questionResults = default(List<QuestionResultsDto>))
        {
            this.SurveyId = surveyId;
            this.SurveyName = surveyName;
            this.Anonymous = anonymous;
            this.QuestionResults = questionResults;
        }
        
        /// <summary>
        /// Gets or Sets SurveyId
        /// </summary>
        [DataMember(Name="surveyId", EmitDefaultValue=false)]
        public int? SurveyId { get; set; }

        /// <summary>
        /// Gets or Sets SurveyName
        /// </summary>
        [DataMember(Name="surveyName", EmitDefaultValue=false)]
        public string SurveyName { get; set; }

        /// <summary>
        /// Gets or Sets Anonymous
        /// </summary>
        [DataMember(Name="anonymous", EmitDefaultValue=false)]
        public bool? Anonymous { get; set; }

        /// <summary>
        /// Gets or Sets QuestionResults
        /// </summary>
        [DataMember(Name="questionResults", EmitDefaultValue=false)]
        public List<QuestionResultsDto> QuestionResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SurveyResultsDto {\n");
            sb.Append("  SurveyId: ").Append(SurveyId).Append("\n");
            sb.Append("  SurveyName: ").Append(SurveyName).Append("\n");
            sb.Append("  Anonymous: ").Append(Anonymous).Append("\n");
            sb.Append("  QuestionResults: ").Append(QuestionResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SurveyResultsDto);
        }

        /// <summary>
        /// Returns true if SurveyResultsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SurveyResultsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SurveyResultsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SurveyId == input.SurveyId ||
                    (this.SurveyId != null &&
                    this.SurveyId.Equals(input.SurveyId))
                ) && 
                (
                    this.SurveyName == input.SurveyName ||
                    (this.SurveyName != null &&
                    this.SurveyName.Equals(input.SurveyName))
                ) && 
                (
                    this.Anonymous == input.Anonymous ||
                    (this.Anonymous != null &&
                    this.Anonymous.Equals(input.Anonymous))
                ) && 
                (
                    this.QuestionResults == input.QuestionResults ||
                    this.QuestionResults != null &&
                    input.QuestionResults != null &&
                    this.QuestionResults.SequenceEqual(input.QuestionResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SurveyId != null)
                    hashCode = hashCode * 59 + this.SurveyId.GetHashCode();
                if (this.SurveyName != null)
                    hashCode = hashCode * 59 + this.SurveyName.GetHashCode();
                if (this.Anonymous != null)
                    hashCode = hashCode * 59 + this.Anonymous.GetHashCode();
                if (this.QuestionResults != null)
                    hashCode = hashCode * 59 + this.QuestionResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
